#!/bin/sh

self="$(cat deploy_start.sh)" && eval "$self"

export target=$1

function postinstall () {
    set -u
    echo
    echo 'Please wait copy generated client v2ray.json into local machine ...'
    scp $target:/etc/v2ray/v2ray.json ./router/opt/etc/
    echo "Run [0m[33m./deploy_v2ray_to_router admin@192.168.50.1[0m to deploy to router."
}

if grep -qs -e 'change_yours_password_here' server.json; then
    echo 'v2ray server served as a shadowsocks server too.'
    echo "You must change \`[0m[33mchange_yours_password_here[0m' to a NEW password in \`./server.json'!"
    exit
fi

copy server.json /etc/v2ray/config.json

deploy_start

set -eu

# --------------------------------------------------------------------------------
#
# Following script will be run on remote VPS, please change it to meet your's need.
#
# -------------------------------------------------------------------------------

# wget https://install.direct/go.sh
# bash go.sh

[ -f /etc/systemd/system/v2ray.service ] && systemctl stop v2ray

package compile-tools

v2ray_version=4.42.2
arch=linux-64

mkdir -p /usr/bin/v2ray
download_and_extract https://github.com/v2fly/v2ray-core/releases/download/v${v2ray_version}/v2ray-${arch}.zip v2ray-v${v2ray_version}
cd v2ray-v${v2ray_version} && chmod +x v2ctl v2ray

if ! ./v2ray --version &>/dev/null; then
    echo 'Not valid v2ray version is supported by current router, please check if download correct version.'
    exit
fi

cp v2ray v2ctl *.dat /usr/local/bin &&
    cp systemd/system/*.service /etc/systemd/system

replace_regex '/usr/local/etc/v2ray/config.json' '/etc/v2ray/config.json' /etc/systemd/system/v2ray.service
replace_regex '/usr/local/etc/v2ray/%i.json' '/etc/v2ray/%i.json' /etc/systemd/system/v2ray@.service

sudo chown -R nobody:nobody /var/log/v2ray/

uuid=$(uuidgen)

replace_string 'NEWUUID' "${uuid}" /etc/v2ray/config.json

cat <<'HEREDOC' >> /etc/sysctl.conf
fs.file-max=51200

net.core.rmem_max=67108864
net.core.wmem_max=67108864
net.core.netdev_max_backlog=250000
net.core.somaxconn=4096

net.ipv4.tcp_syncookies=1
net.ipv4.tcp_tw_reuse=1
net.ipv4.tcp_fin_timeout=30
net.ipv4.tcp_keepalive_time=1200
net.ipv4.ip_local_port_range=10000 65000
net.ipv4.tcp_max_syn_backlog=8192
net.ipv4.tcp_max_tw_buckets=5000
net.ipv4.tcp_mem=25600 51200 102400
net.ipv4.tcp_rmem=4096 87380 67108864
net.ipv4.tcp_wmem=4096 65536 67108864
net.ipv4.tcp_mtu_probing=1

# 开启内核 fastopen, Linux 3.7 以上支持, 3.13 才默认开启.
# 等价于 echo 3 > /proc/sys/net/ipv4/tcp_fastopen
net.ipv4.tcp_fastopen=3
HEREDOC

if kernel_version_greater_than 4.9; then
    modprobe tcp_bbr && lsmod | grep bbr
    echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
    echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
fi

sysctl -p > /dev/null

# test bbr is enabled
sysctl net.ipv4.tcp_available_congestion_control |grep bbr
sysctl -n net.ipv4.tcp_congestion_control |grep bbr

mkdir -p /var/log/v2ray

systemctl enable v2ray
systemctl restart v2ray
systemctl status v2ray

# 从 server.json 来获取必须的一些信息.
v2ray_port=$(cat /etc/v2ray/config.json |grep '"inbounds"' -A10 |grep '"protocol" *: *"vmess"' -A3 |grep '"port"' |grep -o '[0-9]*')
ss_port=$(cat /etc/v2ray/config.json |grep '"inbounds"' -A100 |grep '"protocol" *: *"shadowsocks"' -A3 |grep '"port"' |grep -o '[0-9]*')
ss_encrypt_method=$(cat /etc/v2ray/config.json |grep '"inbounds"' -A100 |grep '"protocol" *: *"shadowsocks"' -A10 |grep '"method"'|cut -d':' -f2|cut -d'"' -f2)
ss_password=$(cat /etc/v2ray/config.json |grep '"inbounds"' -A100 |grep '"protocol" *: *"shadowsocks"' -A10 |grep '"password"'|cut -d':' -f2|cut -d'"' -f2)

expose_port $v2ray_port
expose_port $ss_port

set -u
cat <<HEREDOC > /etc/v2ray/v2ray.json
// 本脚本当运行 deploy_v2ray+ss_to_vps 时自动生成。
// 本脚本可作为 普通 v2ray client 脚本，也可以作为 ASUS merlin 路由器透明代理 v2ray 脚本，
// 运行 ./v2ray+dnsmasq+dnscrypt2 admin@router.asus.com 部署这个配置文件到路由器。

        // 尝试解释一下完整的 V2Ray 数据包流程

        //    [公共步骤]
        //    - 在 ASUS 路由器上，启动 V2Ray, 并且监听 65053 端口。
        //    - 用户输入域名，例如：ip111 或 google。
        //    - 域名发动到路由器 dnsmasq 监听的 53 端口。
        //    - dnsmasq forward 所有（没有cache的查询 DNS 查询）到 V2Ray 监听的本地 65053 端口。
        //    - 首次查询路由： 因为匹配 dns-inbound 中监听的端口,
        //      所有发送到 65053 的内容，会被转发到到 8.8.4.4:53，并且通过对应的
        //      dns-outbound 中的 DNS 协议，将IP 查询（即 A 和 AAAA）转发给内置的 DNS 服务器.

        //    [访问国内网址 ip111.cn]
        //    - 首先会使用 dns 配置中的 domains 策略对 ip111.cn 进行匹配.
        //    - 因为 ip111.cn 域名属于 geosite:cn, 返回的 ip 为 121.41.110.161。
        //    - 该 IP 属于浙江阿里云，属于 geoip:cn, 因此匹配，DNS 请求结束。
        //    - 第一次进入路由: 内置 DNS 发出的 DNS 请求也会按照路由规则走, 确定使用
        //      什么线路来从 202.99.192.66 获取 ip111 的地址,202.99.192.66 匹配 geoip:cn,
        //      判定因此使用直连.(outboundTag: direct)
        //      通过直连 202.99.192.66 的方式， 获取到 ip111.cn 正确 ip 地址 121.41.110.161
        //    - 第二次进入路由: 但是仍然需要确定使用什么线路从 121.41.110.161 来获取内容。
        //      121.41.110.161 匹配 geoip:cn, 判定因此使用直连.
        //      走系统非加密直连，向 121.41.110.161 建立连接, 开始通信。

        //    [访问国外网址 twitter.com]
        //    - 仍然会使用 dns 配置中的 domains 策略对 twitter.com 进行匹配.
        //      尝试使用 202.99.192.66, 因为国内的 DNS 返回的 ip 地址是一个国外的废弃 ip,
        //      此时不满足 expectIPs, 因此不匹配.
        //    - 内置的 DNS 向 https://dns.google/dns-query 发起针对 twitter.com 的请求.
        //      上面的特殊写法代表 DNS over HTTPS (RFC8484, 简称DOH),DoH 默认不经过路由,
        //      直接走第一个 outbound（DoH 域名需要在 hosts 中指定 IP 地址）, 即 proxy.
        //    - 使用 proxy + DOH 的方式，从服务器获取 twitter.com 的正确 IP 地址 142.250.204.68.
        //    - 第一次进入路由： 由于 inbounds 配置了sniffing，所以 IP 又被重置为了域名 twitter.com
        //    - 由于 twitter.com 域名符合 geosite:geolocation-!cn，走 proxy
        //    - 走系统加密直连， 建立连接，开始通信，完成.

        //    [访问不在白名单中的国内网址 kid17.com]
        //    - 首先会使用 dns 配置中的 domains 策略对 kid17.com 进行匹配.
        //      尝试使用 202.99.192.66, 因为 kid17 不在 geosite:cn 里面, 因此不匹配.
        //    - 内置的 DNS 向 https://dns.google/dns-query 发起针对 kid17.com 的请求.
        //      上面的特殊写法代表 DNS over HTTPS (RFC8484, 简称DOH),DoH 默认不经过路由,
        //      直接走第一个 outbound（DoH 域名需要在 hosts 中指定 IP 地址）, 即 proxy.
        //    - 使用 proxy + DOH 的方式，从服务器获取 kid17.com 的正确 IP 地址 47.101.44.231
        //    - 第一次进路由: 47.101.47.231, 此 IP 匹配 geoip:cn, 因此走直连.


        // https://medium.com/@TachyonDevel/%E6%BC%AB%E8%B0%88%E5%90%84%E7%A7%8D%E9%BB%91%E7%A7%91%E6%8A%80%E5%BC%8F-dns-%E6%8A%80%E6%9C%AF%E5%9C%A8%E4%BB%A3%E7%90%86%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-62c50e58cbd0

{
    // "log": {
    //     "loglevel": "info"
    // },
    "dns": {
        "hosts": {
            "dns.google": "8.8.4.4"
        },
        "servers": [
            // V2Ray 会使用 DNS over HTTPS (RFC8484, 简称DOH) 进行查询。
            // DoH 默认走第一个 outbound 来查询 （DoH 域名需要在 hosts 中指定 IP 地址）
            "8.8.4.4",
            {
                // localhost 代表使用运营商的 DNS.
                "address": "localhost",
                "port": 53,
                "domains": [
                    "geosite:cn"
                ],
                "expectIPs": [
                    "ext:geoip-only-cn-private.dat:cn"
                ]
            },
            {
                // fakeDNS 必须，否则会被解析为 fake IP.
                "address": "localhost",
                "port": 53,
                "domains": [
                    "router.asus.com"
                ]
            }
        ],
        // 默认为 false, 开启后，如果通过默认的 DNS 访问返回结果不匹配 cn site/ip,
        // 将使用 servers 里面的第一个，8.8.4.4 访问。
        "disableFallback": true
    },
    "routing": {
        "domainStrategy": "IPIfNonMatch",
        "domainMatcher": "mph",
        "rules": [
            {
                // tproxy 透明代理必需。
                "type": "field",
                "inboundTag": ["transparent"],
                "port": 53,
                "network": "udp",
                "outboundTag": "dns-outbound"
            },
            {
                // redirect 透明代理必需。
                "type": "field",
                "inboundTag": ["dns-inbound"],
                "outboundTag": "dns-outbound"
            },
            {
                "type": "field",
                "ip": [
                    "ext:geoip-only-cn-private.dat:cn",
                    "ext:geoip-only-cn-private.dat:private"
                ],
                "outboundTag": "direct"
            },
            {
                "type": "field",
                "domain": [
                    // 这里添加域名白名单.
                    "geosite:cn",
                    "dl.google.com",
                    "sourceforge.net"
                ],
                "outboundTag": "direct"
            },
            {
                "type": "field",
                "domain": [
                    // 这里添加必须走 proxy 的域名例外.
                    "services.googleapis.cn"
                ],
                "outboundTag": "proxy"
            },
            {
                "type": "field",
                "domain": [
                    "geosite:category-ads"
                ],
                "outboundTag": "block"
            }
        ]
    },
    "inbounds": [
        {
            "tag":"transparent",
            "protocol": "dokodemo-door",
            "port": 1081, // 监听
            "sniffing": {
                "enabled": true,
                "destOverride": ["http","tls"]
            },
            "settings": {
                "network": "tcp,udp",
                // 当值为 true 时，dokodemo-door 会识别出由 iptables 转发而来的数据，并转发到相应的目标地址。详见 传输配置 中的 tproxy 设置。
                "followRedirect": true
            },
            "streamSettings": {
                "sockopt": {
                    // 当 Dokodemo-door 中指定了 followRedirect，且 sockopt.tproxy 为空时，
                    // sockopt.tproxy 的值会被设为 "redirect"，因此该设定 redirect 模式非必须的。
                    // 下面的选项会在 patch_router 的时候，自动选择 tproxy/redirect, 并被替换。
                    "tproxy": "tproxy"
                }
            }
        },
        {
            // redirect 透明代理必需(不支持tproxy时), 用来接受从 dnsmasq 转发过来的 DNS 流量。
            "tag": "dns-inbound",
            "protocol": "dokodemo-door",
            "port": 65053, // 监听 DNS
            "settings": {
                // 这里是流量被转发到的地址，端口，可接受的网络协议类型
                // 注意： 这有别于 dns-outbound 中对应的配置，后者是直接修改 DNS 服务器地址/端口
                // 因为这里的流量直接来自 dnsmasq, 所以这个 address 必须填, 似乎随便填都可以.
                "address": "8.8.4.4",
                "port": 53,
                "network": "udp"
            }
        },
        {
            "protocol": "socks", // 入口协议为 SOCKS 5
            "port": 1080, // 监听端口
            "sniffing": {
                "enabled": true,
                "destOverride": ["http","tls"]
            },
            "settings": {
                "auth": "noauth"  //socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证
            }
        },
        {
            "protocol": "http",
            "port": 3128,
            "settings": {
                "timeout": 0
            }
        }
    ],
    "outbounds": [
        // 下面两个顺序不可以颠倒, 因为列表中的第一个元素作为主出站协议, 当路由匹配不存在或没有匹配成功时，
        // 流量由主出站协议发出, 我们要确保主出站协议必须是 proxy.
        {
            "tag": "proxy",
            "protocol": "vmess", // 出口协议
            "settings": {
                "vnext": [
                    {
                        "address": "$targetip", // 服务器地址，请修改为你自己的服务器 IP 或域名
                        "port": $v2ray_port,  // 服务器端口
                        "users": [
                            {
                                // 注意, vmess 加密默认开启, 也必须开启, 否则上不了网.
                                // alterId 默认为 0, 表示开启 VMessAEAD.
                                "id": "$uuid"  // 用户 ID，必须与服务器端配置相同
                            }
                        ]
                    }
                ]
            },
            "streamSettings": {
                "network": "quic",  // 默认值是 tcp
                "quicSettings": {
                    "header": {
                        "type": "wechat-video"
                    }
                },
                "sockopt": {
                    "mark": 255
                }
            },
            "mux": {
                "enabled": true
            }
        },
        {
            "protocol": "shadowsocks",
            "settings": {
                "servers": [
                    {
                        "address": "$targetip", // Shadowsocks 的服务器地址
                        "method": "$ss_encrypt_method", // Shadowsocks 的加密方式
                        "password": "$ss_password", // Shadowsocks 的密码
                        "port": $ss_port
                    }
                ]
            }
        },
        {
            // 识别这是一个 DNS 请求， 并发送到内部 DNS 进行查询.
            "tag": "dns-outbound",
            "protocol": "dns",
            "streamSettings": {
                "sockopt": {
                    "mark": 255
                }
            }
        },
        {
            "tag": "direct",
            "protocol": "freedom",
            "settings": {
                // 这里我选择加上试试, 搞不好我的方案, freedom 真的又去访问 dnsmasq
                // 的 53 端口, 又被转到 V2ray 的 DNS 呢.
                "domainStrategy": "UseIP"
            },
            "streamSettings": {
                "network": "tcp",  // 这是默认值
                "sockopt": {
                    "mark": 255
                }
            }
        },
        {
            "tag": "block",
            "protocol": "blackhole",
            "settings": {
                "response": {
                    "type": "http"
                }
            }
        }
    ],
    "policy": {
        "levels": {
            "0": {
                "bufferSize": 4
            }
        }
    }
}
HEREDOC

echo "Your's shadowsocks port: [0m[33m${ss_port}[0m"
echo "Your's shadowsocks encrypt method: [0m[33m${ss_encrypt_method}[0m"
echo "Your's shadowsocks password: [0m[33m${ss_password}[0m"
echo 'Congratulations, Deploy succssful!'

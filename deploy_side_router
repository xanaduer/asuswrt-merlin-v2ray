#!/bin/bash

self="$(\curl -sS https://gitlab.com/zw963/deployment_bash/-/raw/v0.8.3/deploy_start.sh)" && eval "$self"

export target=$1

config=./router/opt/etc/v2ray.json

if [ ! -e "$config" ]; then
    echo "Please create ${config} or generate it use ./deploy_server before deploy to side router."
    exit
fi

function postinstall () {
    set -u
    echo
    echo 'Please waiting for 10 seconds to check google available ...'
    sleep 10
    check_google=$(curl -so /dev/null -w 'Google: %{http_code}\n' google.com)
    if [[ "$check_google" =~ 301|200 ]]; then
        echo "visit google successful, Your's ip is: $(curl http://ipecho.net/plain; echo)"
    else
        echo 'visit google failed, something was wrong!'
    fi
}

ssh "$*" "sudo mkdir -p /opt/etc /opt/sbin /var/log/v2ray"
copy "$config" /opt/etc/
copy router/opt/etc/apply_iptables_rule.sh /opt/etc/
copy router/opt/etc/clean_iptables_rule.sh /opt/etc
copy router/opt/etc/update_geosite.sh /opt/etc
copy router/opt/etc/update_big_geosite.sh /opt/etc
copy router/opt/etc/toggle_proxy.sh /opt/etc
copy router/opt/etc/patch_router /opt/etc
copy router/opt/etc/iptables-rule.service /etc/systemd/system
copy router/opt/etc/check_google_use_proxy.sh /opt/etc
copy router/opt/etc/check_google_use_socks5.sh /opt/etc
copy router/opt/etc/debug_v2ray.sh /opt/etc

if [ -d predownloaded_binary ]; then
    echo 'Copy predownloaded binary to router ...'
    v2ray_zip_file=$(ls -1 predownloaded_binary/v2ray-linux-*.zip |head -n1)
    copy $v2ray_zip_file $v2ray_zip_file
    xray_zip_file=$(ls -1 predownloaded_binary/Xray-linux-*.zip |head -n1)
    copy $xray_zip_file $xray_zip_file
else
    ssh "$*" "rm -rf predownloaded_binary"
    echo 'Please download predownloaded binary into predownloaded_binary folder.'
    exit 1
fi

deploy_start

set -eu

# --------------------------------------------------------------------------------
#
# Following script will be run on router, please change it to meet your's need.
#
# -------------------------------------------------------------------------------

#
# 如果第一次运行本脚本, 请务必注意以下几点：

# 1. 软路由设定使用固定 IP,
# 2. 软路由将 gateway 以及 dns1 指定到你的主路由(WiFi 路由器) IP.
# 3. 以上设定完后，在主路由通过(路由器的) web 界面，将网关(gateway)以及第一个 dns(dns1)
#    软路由 IP 地址.

# 以 centos 7 为例，需要针对 /etc/sysconfig/network-scripts/ifcfg-enp0s25
# 做如下更改：(enp0s25 为网卡 interface)
# - 修改 BOOTPROTO=none
# - 设定 IPADDR=192.168.50.111 (同网段任意固定 IP)
# - 设定 GATEWAY=192.168.50.1 (主路由器 IP)
# - 设定 DNS1=192.168.50.1 (主路由 IP)
# - 设定 PREFIX=24 (用来初始化 netmask 等)
# - for centos 7, systemctl restart network OR
#    for centos 8, nmcli connection down enp0s25 && sudo nmcli connection up enp0s25
# - 关闭 firewalld, 因为它可能会造成 iptables-rule.service 在启动时失败。

# 最后，可选的，打开 /etc/systemd/logind.conf, 修改为如下设置，来避免关闭盖子待机。
# [Login]
# HandleLidSwitch=ignore
# HandleLidSwitchDocked=ignore

# 还需要阻止自动 suspend, 以及 hibernate.(取消使用 unmask 替换 mask)
# $ systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target

cd predownloaded_binary &&
    unzip -o v2ray-linux-64.zip &&
    unzip -o Xray-linux-64.zip &&
    chmod +x ./xray

if ./xray -version; then
    set +e; systemctl stop v2ray; set -e
    cp xray geosite.dat geoip-only-cn-private.dat /opt/sbin/
    cp systemd/system/*.service /etc/systemd/system
    replace_regex1 'RestartPreventExitStatus=23' 'RestartPreventExitStatus=23
# Added by user
LimitNPROC=500
LimitNOFILE=1000000' /etc/systemd/system/v2ray.service
    replace_regex1 'RestartPreventExitStatus=23' 'RestartPreventExitStatus=23
# Added by user
LimitNPROC=500
LimitNOFILE=1000000' /etc/systemd/system/v2ray@.service
    replace_string1 '/usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json' '/opt/sbin/xray run -config /opt/etc/v2ray.json' /etc/systemd/system/v2ray.service
    replace_string1 '/usr/local/bin/v2ray -config /usr/local/etc/v2ray/%i.json' '/opt/sbin/xray run -config /opt/etc/%i.json' /etc/systemd/system/v2ray@.service
    systemctl daemon-reload
else
    echo 'Not valid xray version is supported by current router, please download correct version.'
    exit
fi

echo 'xray is installed'

# ----------------------------------------------------
#
# 下面执行一些脚本检查与替换。
#
# ---------------------------------------------------

cd /opt/etc
chmod +x apply_iptables_rule.sh \
      clean_iptables_rule.sh \
      update_geosite.sh \
      update_big_geosite.sh \
      toggle_proxy.sh \
      patch_router \
      check_google_use_proxy.sh \
      check_google_use_socks5.sh \
      debug_v2ray.sh

# 旁路由直接在 53 端口监听
replace_string '65053' '53' /opt/etc/v2ray.json

# 下面的 iptables 在旁路由模式下，无需设置。
replace_string 'iptables -t mangle -A V2RAY_UDP -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN' 'iptables -t mangle -A V2RAY_UDP -d 192.168.0.0/16 -p udp -j RETURN' /opt/etc/apply_iptables_rule.sh
replace_regex 'iptables -t mangle -A V2RAY_UDP -p udp -j TPROXY --tproxy-mark 1 --on-port \$local_v2ray_port' '' /opt/etc/apply_iptables_rule.sh

/opt/etc/clean_iptables_rule.sh && chmod -x /opt/etc/apply_iptables_rule.sh
chmod +x /opt/etc/apply_iptables_rule.sh && /opt/etc/apply_iptables_rule.sh

# ----------------------------------------------------
#
# 启动所需的脚本
#
# ---------------------------------------------------

set +e
systemctl disable firewalld &>/dev/null
systemctl stop firewalld &>/dev/null
set -e
systemctl daemon-reload && systemctl start v2ray && systemctl enable v2ray && systemctl status v2ray
systemctl start iptables-rule &&  systemctl enable iptables-rule
cp /opt/etc/update_geosite.sh /etc/cron.weekly/

config_sysctl_for_proxy

/opt/etc/patch_router && echo "Congratulations, [0m[33mDeploy succssful[0m!"
